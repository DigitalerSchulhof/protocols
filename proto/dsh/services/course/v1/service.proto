syntax = "proto3";

package dsh.services.course.v1;

import "dsh/services/course/v1/resources.proto";
import "google/protobuf/field_mask.proto";

service CourseService {
  rpc ListCourses(ListCoursesRequest) returns (ListCoursesResponse);

  rpc GetCourse(GetCourseRequest) returns (GetCourseResponse);

  rpc BatchGetCourses(BatchGetCoursesRequest) returns (BatchGetCoursesResponse);

  rpc CreateCourse(CreateCourseRequest) returns (CreateCourseResponse);

  rpc UpdateCourse(UpdateCourseRequest) returns (UpdateCourseResponse);

  rpc UpdateCoursesWhere(UpdateCoursesWhereRequest) returns (UpdateCoursesWhereResponse);

  rpc DeleteCourse(DeleteCourseRequest) returns (DeleteCourseResponse);

  rpc DeleteCoursesWhere(DeleteCoursesWhereRequest) returns (DeleteCoursesWhereResponse);
}

message ListCoursesRequest {
  int32 limit = 1;
  int32 offset = 2;
  string filter = 3;
  string order_by = 4;
}

message ListCoursesResponse {
  repeated Course courses = 1;
  Meta meta = 2;

  message Meta {
    int32 total_count = 1;
    int32 limit = 2;
    int32 offset = 3;
    bool has_previous = 4;
    bool has_next = 5;
  }
}

message GetCourseRequest {
  string id = 1;
}

message GetCourseResponse {
  Course course = 1;
}

message BatchGetCoursesRequest {
  repeated string ids = 1;
}

message BatchGetCoursesResponse {
  repeated Course courses = 1;
}

message CreateCourseRequest {
  Course data = 1;
}

message CreateCourseResponse {
  Course course = 1;
}

message UpdateCourseRequest {
  string id = 1;
  Course data = 2;
  google.protobuf.FieldMask update_mask = 3;
  optional string if_rev = 4;
}

message UpdateCourseResponse {
  Course course = 1;
}

message UpdateCoursesWhereRequest {
  string filter = 1;
  Course data = 2;
  google.protobuf.FieldMask update_mask = 3;
}

message UpdateCoursesWhereResponse {
  repeated Course courses = 1;
}

message DeleteCourseRequest {
  string id = 1;
  optional string if_rev = 2;
}

message DeleteCourseResponse {
  Course course = 1;
}

message DeleteCoursesWhereRequest {
  string filter = 1;
}

message DeleteCoursesWhereResponse {
  repeated Course courses = 1;
}
