diff --git a/src/descriptor.js b/src/descriptor.js
index ca9060b8afca73ba8ca7173a045cae521fabd01b..af611347e564ba8620c01e783b1c4f0f3bc2887c 100755
--- a/src/descriptor.js
+++ b/src/descriptor.js
@@ -199,7 +199,7 @@ function createMessageSignature(rootDescriptor, messageDescriptor, parentName =
         if (!fieldDescriptor.has_oneof_index) {
             fieldSignatures.push(comment.addDeprecatedJsDoc(ts.factory.createPropertySignature(undefined, getFieldName(fieldDescriptor), field.isOptional(rootDescriptor, fieldDescriptor)
                 ? ts.factory.createToken(ts.SyntaxKind.QuestionToken)
-                : undefined, field.wrapRepeatedType(field.getType(fieldDescriptor, rootDescriptor), fieldDescriptor)), fieldDescriptor.options?.deprecated));
+                : undefined, field.wrapRepeatedType(field.getType(fieldDescriptor, rootDescriptor), fieldDescriptor, true)), fieldDescriptor.options?.deprecated));
         }
     }
     if (oneOfSignatures.length) {
@@ -237,7 +237,7 @@ function createPrimitiveMessageSignature(rootDescriptor, messageDescriptor) {
             field.isMessage(fieldDescriptor) ||
             field.isRequiredWithoutExplicitDefault(rootDescriptor, fieldDescriptor))
             ? ts.factory.createToken(ts.SyntaxKind.QuestionToken)
-            : undefined, field.wrapRepeatedType(fieldType, fieldDescriptor)));
+            : undefined, field.wrapRepeatedType(fieldType, fieldDescriptor, true)));
     }
     return ts.factory.createTypeLiteralNode(fieldSignatures);
 }
@@ -415,7 +415,7 @@ function createOneOfGetter(index, oneofDescriptor, messageDescriptor, pbIdentifi
     return ts.factory.createGetAccessorDeclaration(undefined, oneofDescriptor.name, [], undefined, ts.factory.createBlock(statements, true));
 }
 function createSetter(rootDescriptor, messageDescriptor, fieldDescriptor, pbIdentifier) {
-    const type = field.wrapRepeatedType(field.getType(fieldDescriptor, rootDescriptor), fieldDescriptor);
+    const type = field.wrapRepeatedType(field.getType(fieldDescriptor, rootDescriptor), fieldDescriptor, true);
     const valueParameter = ts.factory.createIdentifier("value");
     let block;
     if (fieldDescriptor.has_oneof_index) {
diff --git a/src/field.js b/src/field.js
index 36943afa0c402a92b96a8058cad90be6904b5b98..267b8472fb0c0b6e4051236668e1a09fd55c769f 100755
--- a/src/field.js
+++ b/src/field.js
@@ -7,10 +7,14 @@ const ts = require("typescript");
 /**
  * @param {*} type
  * @param {descriptor.FieldDescriptorProto} fieldDescriptor
+ * @param {boolean=} makeReadonly
  */
-function wrapRepeatedType(type, fieldDescriptor) {
+function wrapRepeatedType(type, fieldDescriptor, makeReadonly) {
     if (isRepeated(fieldDescriptor) && !isMap(fieldDescriptor)) {
         type = ts.factory.createArrayTypeNode(type);
+        if (makeReadonly) {
+          type = ts.factory.createTypeOperatorNode(ts.SyntaxKind.ReadonlyKeyword, type);
+        }
     }
     return type;
 }
diff --git a/src/rpc/server.js b/src/rpc/server.js
index 7212fcefa72608eb4a4e58c1c34154daa1aabd5c..e1f313f9ec66631c418fd5be91cad978eb928cee 100755
--- a/src/rpc/server.js
+++ b/src/rpc/server.js
@@ -136,9 +136,6 @@ exports.createGrpcInterfaceType = createGrpcInterfaceType;
 function createUnimplementedServer(rootDescriptor, serviceDescriptor, grpcIdentifier) {
     const members = [
         ts.factory.createPropertyDeclaration([ts.factory.createModifier(ts.SyntaxKind.StaticKeyword)], "definition", undefined, undefined, createServiceDefinition(rootDescriptor, serviceDescriptor)),
-        ts.factory.createIndexSignature(undefined, [
-            util.createParameter("method", ts.factory.createKeywordTypeNode(ts.SyntaxKind.StringKeyword)),
-        ], ts.factory.createTypeReferenceNode(ts.factory.createQualifiedName(grpcIdentifier, "UntypedHandleCall"))),
     ];
     for (const methodDescriptor of serviceDescriptor.method) {
         const parameters = [];